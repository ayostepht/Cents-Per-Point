name: Auto Tag on Dependabot Merge

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - beta

permissions:
  contents: write
  pull-requests: read

jobs:
  tag:
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'dependencies')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Check if any tags exist
          if ! git describe --tags --abbrev=0 2>/dev/null; then
            echo "No tags found. Starting with v1.0.0"
            echo "latest_tag=v1.0.0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          LATEST_TAG=$(git describe --tags --abbrev=0)
          # Validate tag format
          if ! [[ $LATEST_TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid tag format: $LATEST_TAG"
            exit 1
          fi
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Create new tag
        id: create_tag
        run: |
          LATEST_TAG=${{ steps.get_latest_tag.outputs.latest_tag }}
          # Extract version numbers
          MAJOR=$(echo $LATEST_TAG | cut -d. -f1 | tr -d 'v')
          MINOR=$(echo $LATEST_TAG | cut -d. -f2)
          PATCH=$(echo $LATEST_TAG | cut -d. -f3)
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_TAG="v$MAJOR.$MINOR.$NEW_PATCH"
          
          # Create and push the new tag
          git tag -a $NEW_TAG -m "Security update: $NEW_TAG"
          git push origin $NEW_TAG
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Update RELEASE_NOTES.md
        run: |
          NEW_TAG=${{ steps.create_tag.outputs.new_tag }}
          PR_NUMBER=${{ github.event.pull_request.number }}
          PR_TITLE="${{ github.event.pull_request.title }}"
          
          # Create RELEASE_NOTES.md if it doesn't exist
          if [ ! -f docs/RELEASE_NOTES.md ]; then
            mkdir -p docs
            echo "# Release Notes" > docs/RELEASE_NOTES.md
          fi
          
          # Escape special characters in PR title
          ESCAPED_TITLE=$(echo "$PR_TITLE" | sed 's/"/\\"/g')
          
          # Add new section to RELEASE_NOTES.md
          cat << EOF >> docs/RELEASE_NOTES.md
          
          ## $NEW_TAG
          
          ### Security Updates
          - "$ESCAPED_TITLE" (#$PR_NUMBER)
          
          EOF
          
          # Commit and push changes
          git add docs/RELEASE_NOTES.md
          git commit -m "docs: update release notes for $NEW_TAG"
          git push origin main

      - name: Trigger Docker Build
        run: |
          NEW_TAG=${{ steps.create_tag.outputs.new_tag }}
          # Verify Docker build was triggered
          echo "Verifying Docker build for tag: $NEW_TAG"
          # Add your Docker build verification logic here
          # For example, you could check the GitHub Actions API for the build status 