â€‹import React, { useState, useEffect, createContext, useContext, useMemo, useCallback } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged, setPersistence, browserLocalPersistence } from 'firebase/auth';
import { getFirestore, doc, addDoc, setDoc, deleteDoc, onSnapshot, collection, query, Timestamp, setLogLevel } from 'firebase/firestore';
import { BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';
import { Home, List, PlusCircle, Edit2, Trash2, CalculatorIcon, X, TrendingUp, DollarSign, CalendarDays, Info, CheckCircle, AlertTriangle, XCircle, ChevronDown, ChevronUp, Search } from 'lucide-react';
// Removed: import DatePicker from 'react-datepicker';
// Removed: import 'react-datepicker/dist/react-datepicker.css';

// --- Firebase Configuration ---
// NOTE: __firebase_config and __app_id will be provided by the environment
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {
    apiKey: "YOUR_API_KEY", // Replace with your actual config
    authDomain: "YOUR_AUTH_DOMAIN",
    projectId: "YOUR_PROJECT_ID",
    storageBucket: "YOUR_STORAGE_BUCKET",
    messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
    appId: "YOUR_APP_ID"
};
const appId = typeof __app_id !== 'undefined' ? __app_id : 'cents-per-point-dev';

// Initialize Firebase
const firebaseApp = initializeApp(firebaseConfig);
const auth = getAuth(firebaseApp);
const db = getFirestore(firebaseApp);
setLogLevel('debug'); // For Firestore logging

// --- Constants ---
const SOURCE_OPTIONS = [
    // Credit Cards
    { value: 'chase_ur', label: 'Chase Ultimate Rewards' },
    { value: 'amex_mr', label: 'American Express Membership Rewards' },
    { value: 'citi_ty', label: 'Citi ThankYou Points' },
    { value: 'cap1_miles', label: 'Capital One Miles' },
    { value: 'bilt_rewards', label: 'Bilt Rewards' },
    { value: 'wells_fargo', label: 'Wells Fargo Rewards' },
    { value: 'boa_points', label: 'Bank of America Points' },
    { value: 'discover_cb', label: 'Discover Cashback Bonus' },
    { value: 'us_bank', label: 'US Bank Points' },
    { value: 'barclays', label: 'Barclays Arrival Miles' },
    
    // Hotels
    { value: 'marriott_bonvoy', label: 'Marriott Bonvoy' },
    { value: 'hilton_honors', label: 'Hilton Honors' },
    { value: 'world_of_hyatt', label: 'World of Hyatt' },
    { value: 'ihg_rewards', label: 'IHG One Rewards' },
    { value: 'wyndham_rewards', label: 'Wyndham Rewards' },
    { value: 'choice_privileges', label: 'Choice Privileges' },
    { value: 'best_western', label: 'Best Western Rewards' },
    { value: 'accor_all', label: 'Accor Live Limitless' },
    { value: 'radisson_rewards', label: 'Radisson Rewards' },
    { value: 'sonesta_travel', label: 'Sonesta Travel Pass' },
    
    // Airlines
    { value: 'american_aa', label: 'American Airlines AAdvantage' },
    { value: 'delta_skymiles', label: 'Delta SkyMiles' },
    { value: 'united_mileageplus', label: 'United MileagePlus' },
    { value: 'southwest_rr', label: 'Southwest Rapid Rewards' },
    { value: 'alaska_mp', label: 'Alaska Airlines Mileage Plan' },
    { value: 'jetblue_tb', label: 'JetBlue TrueBlue' },
    { value: 'hawaiian_hm', label: 'Hawaiian Airlines HawaiianMiles' },
    { value: 'spirit_fs', label: 'Spirit Airlines Free Spirit' },
    { value: 'frontier_miles', label: 'Frontier Airlines Miles' },
    { value: 'air_canada', label: 'Air Canada Aeroplan' },
    { value: 'british_airways', label: 'British Airways Avios' },
    { value: 'flying_blue', label: 'Air France-KLM Flying Blue' },
    { value: 'lufthansa_mm', label: 'Lufthansa Miles & More' },
    { value: 'emirates_skywards', label: 'Emirates Skywards' },
    { value: 'qatar_pc', label: 'Qatar Airways Privilege Club' },
    { value: 'singapore_kf', label: 'Singapore Airlines KrisFlyer' },
    { value: 'virgin_atlantic', label: 'Virgin Atlantic Flying Club' },
    
    { value: 'other', label: 'Other' },
];

const COMMONLY_ACCEPTED_POINT_VALUES = {
    // Credit Cards
    chase_ur: 2.0,
    amex_mr: 1.8,
    citi_ty: 1.7,
    cap1_miles: 1.0,
    bilt_rewards: 1.5,
    wells_fargo: 1.0,
    boa_points: 1.0,
    discover_cb: 1.0,
    us_bank: 1.0,
    barclays: 1.0,
    
    // Hotels
    marriott_bonvoy: 0.8,
    hilton_honors: 0.6,
    world_of_hyatt: 2.3,
    ihg_rewards: 0.9,
    wyndham_rewards: 1.0,
    choice_privileges: 0.8,
    best_western: 0.8,
    accor_all: 0.8,
    radisson_rewards: 0.8,
    sonesta_travel: 0.8,
    
    // Airlines
    american_aa: 1.2,
    delta_skymiles: 1.2,
    united_mileageplus: 1.3,
    southwest_rr: 1.4,
    alaska_mp: 1.4,
    jetblue_tb: 1.3,
    hawaiian_hm: 0.9,
    spirit_fs: 0.8,
    frontier_miles: 0.8,
    air_canada: 1.2,
    british_airways: 1.5,
    flying_blue: 1.3,
    lufthansa_mm: 1.1,
    emirates_skywards: 1.0,
    qatar_pc: 1.2,
    singapore_kf: 1.5,
    virgin_atlantic: 1.3,
    
    other: 1.0, // Default for 'Other'
};

const PIE_CHART_COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D', '#A4DE6C', '#D0ED57', '#FFC658'];

// --- Context for Redemptions ---
const RedemptionContext = createContext();

export const RedemptionProvider = ({ children }) => {
    const [redemptions, setRedemptions] = useState([]);
    const [loading, setLoading] = useState(true);
    const [userId, setUserId] = useState(null);
    const [isAuthReady, setIsAuthReady] = useState(false);

    useEffect(() => {
        const unsubscribeAuth = onAuthStateChanged(auth, async (user) => {
            if (user) {
                setUserId(user.uid);
            } else {
                // Handle anonymous sign-in if no user or token
                if (typeof __initial_auth_token === 'undefined') {
                    try {
                        await setPersistence(auth, browserLocalPersistence); // Persist auth state
                        const anonUser = await signInAnonymously(auth);
                        setUserId(anonUser.user.uid);
                    } catch (error) {
                        console.error("Error signing in anonymously:", error);
                        setUserId(crypto.randomUUID()); // Fallback to random UUID if anonymous sign-in fails
                    }
                } else {
                     setUserId(crypto.randomUUID()); // Fallback if token is defined but user is null (should not happen with custom token)
                }
            }
            setIsAuthReady(true);
        });
       
        // Attempt to sign in with custom token if available
        const attemptSignInWithToken = async () => {
            if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
                try {
                    await setPersistence(auth, browserLocalPersistence); // Persist auth state
                    await signInWithCustomToken(auth, __initial_auth_token);
                    // onAuthStateChanged will handle setting userId
                } catch (error) {
                    console.error("Error signing in with custom token:", error);
                    // Fallback to anonymous if token sign-in fails
                    if (!auth.currentUser) {
                         try {
                            await setPersistence(auth, browserLocalPersistence);
                            const anonUser = await signInAnonymously(auth);
                            setUserId(anonUser.user.uid);
                        } catch (anonError) {
                            console.error("Error signing in anonymously after token failure:", anonError);
                            setUserId(crypto.randomUUID());
                        }
                    }
                }
            }
        };

        if (!auth.currentUser && typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
            attemptSignInWithToken();
        } else if (!auth.currentUser && (typeof __initial_auth_token === 'undefined' || !__initial_auth_token)) {
            // If no token and no current user, proceed to anonymous sign-in logic in onAuthStateChanged
            // This path is covered by the onAuthStateChanged's `else` block.
        }


        return () => unsubscribeAuth();
    }, []);

    useEffect(() => {
        if (!isAuthReady || !userId) {
            setLoading(false); // Not ready or no user ID, stop loading
            return;
        }
        setLoading(true);
        const q = query(collection(db, `artifacts/${appId}/users/${userId}/redemptions`));
        const unsubscribeFirestore = onSnapshot(q, (querySnapshot) => {
            const redemptionsData = [];
            querySnapshot.forEach((doc) => {
                const data = doc.data();
                redemptionsData.push({
                    id: doc.id,
                    ...data,
                    // Ensure date is a Date object if it's a Firestore Timestamp
                    date: data.date instanceof Timestamp ? data.date.toDate() : new Date(data.date)
                });
            });
            // Sort by date descending by default
            redemptionsData.sort((a, b) => b.date - a.date);
            setRedemptions(redemptionsData);
            setLoading(false);
        }, (error) => {
            console.error("Error fetching redemptions:", error);
            setLoading(false);
        });

        return () => unsubscribeFirestore();
    }, [isAuthReady, userId]);

    const calculateCPP = (cashValue, taxesFees, totalPoints) => {
        if (totalPoints <= 0) return 0;
        return parseFloat(((parseFloat(cashValue) - parseFloat(taxesFees || 0)) / parseFloat(totalPoints) * 100).toFixed(2));
    };

    const addRedemption = async (redemption) => {
        if (!userId) {
            console.error("User ID not available. Cannot add redemption.");
            // Optionally, show a message to the user
            return;
        }
        try {
            const cpp = calculateCPP(redemption.cashValue, redemption.taxesFees, redemption.totalPoints);
            const newRedemption = { ...redemption, cpp, date: Timestamp.fromDate(new Date(redemption.date)) };
            await addDoc(collection(db, `artifacts/${appId}/users/${userId}/redemptions`), newRedemption);
        } catch (error) {
            console.error("Error adding redemption:", error);
        }
    };

    const updateRedemption = async (id, updatedRedemption) => {
         if (!userId) {
            console.error("User ID not available. Cannot update redemption.");
            return;
        }
        try {
            const cpp = calculateCPP(updatedRedemption.cashValue, updatedRedemption.taxesFees, updatedRedemption.totalPoints);
            const redemptionToUpdate = { ...updatedRedemption, cpp, date: Timestamp.fromDate(new Date(updatedRedemption.date)) };
            await setDoc(doc(db, `artifacts/${appId}/users/${userId}/redemptions`, id), redemptionToUpdate);
        } catch (error) {
            console.error("Error updating redemption:", error);
        }
    };

    const deleteRedemption = async (id) => {
        if (!userId) {
            console.error("User ID not available. Cannot delete redemption.");
            return;
        }
        try {
            await deleteDoc(doc(db, `artifacts/${appId}/users/${userId}/redemptions`, id));
        } catch (error) {
            console.error("Error deleting redemption:", error);
        }
    };
   
    const getSourceLabel = (value) => {
        const option = SOURCE_OPTIONS.find(opt => opt.value === value);
        return option ? option.label : 'N/A';
    };

    return (
        <RedemptionContext.Provider value={{ redemptions, loading, addRedemption, updateRedemption, deleteRedemption, calculateCPP, userId, getSourceLabel, isAuthReady }}>
            {children}
        </RedemptionContext.Provider>
    );
};

// --- Helper Components ---
const Modal = ({ isOpen, onClose, title, children }) => {
    if (!isOpen) return null;
    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-md transform transition-all">
                <div className="flex justify-between items-center mb-4">
                    <h3 className="text-xl font-semibold text-gray-800">{title}</h3>
                    <button onClick={onClose} className="text-gray-500 hover:text-gray-700">
                        <X size={24} />
                    </button>
                </div>
                {children}
            </div>
        </div>
    );
};

const CustomTooltip = ({ active, payload, label }) => {
    if (active && payload && payload.length) {
      return (
        <div className="bg-white p-2 border border-gray-300 rounded shadow-lg">
          <p className="label text-sm text-gray-700">{`${label}`}</p>
          {payload.map((entry, index) => (
            <p key={`item-${index}`} style={{ color: entry.color }} className="text-xs">
              {`${entry.name} : ${entry.value.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}
            </p>
          ))}
        </div>
      );
    }
    return null;
};


// --- Page Components ---

// DashboardPage Component
const DashboardPage = () => {
    const { redemptions, loading, getSourceLabel } = useContext(RedemptionContext);

    const overallStats = useMemo(() => {
        if (!redemptions || redemptions.length === 0) {
            return { avgCpp: 0, totalValue: 0, totalPoints: 0, bestRedemption: null, worstRedemption: null };
        }
        const totalCppSum = redemptions.reduce((sum, r) => sum + r.cpp, 0);
        const totalValueSum = redemptions.reduce((sum, r) => sum + (parseFloat(r.cashValue) - parseFloat(r.taxesFees || 0)), 0);
        const totalPointsSum = redemptions.reduce((sum, r) => sum + parseFloat(r.totalPoints), 0);
       
        let bestRedemption = redemptions[0];
        let worstRedemption = redemptions[0];
        redemptions.forEach(r => {
            if (r.cpp > bestRedemption.cpp) bestRedemption = r;
            if (r.cpp < worstRedemption.cpp) worstRedemption = r;
        });

        return {
            avgCpp: parseFloat((totalCppSum / redemptions.length).toFixed(2)),
            totalValue: parseFloat(totalValueSum.toFixed(2)),
            totalPoints: totalPointsSum,
            bestRedemption,
            worstRedemption
        };
    }, [redemptions]);

    const cppBySourceData = useMemo(() => {
        if (!redemptions || redemptions.length === 0) return [];
        const sourceMap = new Map();
        redemptions.forEach(r => {
            const sourceLabel = getSourceLabel(r.source);
            if (!sourceMap.has(sourceLabel)) {
                sourceMap.set(sourceLabel, { totalCpp: 0, count: 0, name: sourceLabel });
            }
            const current = sourceMap.get(sourceLabel);
            current.totalCpp += r.cpp;
            current.count += 1;
            sourceMap.set(sourceLabel, current);
        });
        return Array.from(sourceMap.values()).map(s => ({ name: s.name, CPP: parseFloat((s.totalCpp / s.count).toFixed(2)) }));
    }, [redemptions, getSourceLabel]);

    const redemptionsOverTimeData = useMemo(() => {
        if (!redemptions || redemptions.length === 0) return [];
        const monthMap = new Map();
        // Ensure redemptions are sorted by date for chronological processing
        const sortedRedemptions = [...redemptions].sort((a, b) => new Date(a.date) - new Date(b.date));

        sortedRedemptions.forEach(r => {
            const monthYear = new Date(r.date).toLocaleDateString('en-US', { year: 'numeric', month: 'short' });
            if (!monthMap.has(monthYear)) {
                monthMap.set(monthYear, { points: 0, value: 0, count: 0, name: monthYear, date: new Date(r.date) });
            }
            const current = monthMap.get(monthYear);
            current.points += parseFloat(r.totalPoints);
            current.value += (parseFloat(r.cashValue) - parseFloat(r.taxesFees || 0));
            current.count +=1;
            monthMap.set(monthYear, current);
        });
        // Sort by date to ensure the line chart displays chronologically
        return Array.from(monthMap.values()).sort((a,b) => a.date - b.date);
    }, [redemptions]);
   
    const recentRedemptions = useMemo(() => {
        return redemptions.slice(0, 5); // Already sorted by date descending in context
    }, [redemptions]);


    if (loading) return <div className="text-center p-10">Loading dashboard data...</div>;
    if (!redemptions || redemptions.length === 0) return <div className="text-center p-10 text-gray-600">No redemption data yet. Add some redemptions to see your dashboard!</div>;

    return (
        <div className="p-4 md:p-6 space-y-6">
            <h2 className="text-3xl font-semibold text-gray-800">Dashboard</h2>
           
            {/* Key Metrics */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <MetricCard title="Overall Average CPP" value={`${overallStats.avgCpp} Â¢`} icon={<TrendingUp className="text-blue-500" />} />
                <MetricCard title="Total Value Redeemed" value={`$${overallStats.totalValue.toLocaleString()}`} icon={<DollarSign className="text-green-500" />} />
                <MetricCard title="Total Points Redeemed" value={overallStats.totalPoints.toLocaleString()} icon={<List className="text-purple-500" />} />
                <MetricCard title="Total Redemptions" value={redemptions.length.toLocaleString()} icon={<CalendarDays className="text-indigo-500" />} />
            </div>

            {/* Charts */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <ChartCard title="Average CPP by Source">
                    <ResponsiveContainer width="100%" height={300}>
                        <BarChart data={cppBySourceData} margin={{ top: 5, right: 20, left: 0, bottom: 5 }}>
                            <CartesianGrid strokeDasharray="3 3" />
                            <XAxis dataKey="name" angle={-30} textAnchor="end" height={70} interval={0} tick={{fontSize: 10}} />
                            <YAxis label={{ value: 'CPP (Â¢)', angle: -90, position: 'insideLeft', offset:10, fontSize: 12 }} tick={{fontSize: 10}} />
                            <Tooltip content={<CustomTooltip />} />
                            <Legend wrapperStyle={{fontSize: "12px"}} />
                            <Bar dataKey="CPP" fill="#8884d8" />
                        </BarChart>
                    </ResponsiveContainer>
                </ChartCard>
                <ChartCard title="Redemptions Over Time (Value Redeemed)">
                     <ResponsiveContainer width="100%" height={300}>
                        <LineChart data={redemptionsOverTimeData} margin={{ top: 5, right: 20, left: 10, bottom: 5 }}>
                            <CartesianGrid strokeDasharray="3 3" />
                            <XAxis dataKey="name" angle={-30} textAnchor="end" height={70} interval={0} tick={{fontSize: 10}} />
                            <YAxis
                                label={{ value: 'Value ($)', angle: -90, position: 'insideLeft', offset:10, fontSize: 12 }}
                                tickFormatter={(value) => `$${value.toLocaleString()}`}
                                tick={{fontSize: 10}}
                            />
                            <Tooltip content={<CustomTooltip />} />
                            <Legend wrapperStyle={{fontSize: "12px"}} />
                            <Line type="monotone" dataKey="value" name="Value Redeemed ($)" stroke="#82ca9d" activeDot={{ r: 8 }} />
                        </LineChart>
                    </ResponsiveContainer>
                </ChartCard>
            </div>
           
             <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <ChartCard title="Distribution of Points by Source">
                    <ResponsiveContainer width="100%" height={300}>
                        <PieChart>
                            <Pie
                                data={cppBySourceData.map(s => ({name: s.name, value: redemptions.filter(r => getSourceLabel(r.source) === s.name).reduce((sum, r) => sum + r.totalPoints, 0)}))}
                                cx="50%"
                                cy="50%"
                                labelLine={false}
                                label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                                outerRadius={80}
                                fill="#8884d8"
                                dataKey="value"
                                legendType="scroll"
                            >
                                {cppBySourceData.map((entry, index) => (
                                    <Cell key={`cell-${index}`} fill={PIE_CHART_COLORS[index % PIE_CHART_COLORS.length]} />
                                ))}
                            </Pie>
                            <Tooltip content={<CustomTooltip />} />
                            <Legend wrapperStyle={{fontSize: "12px"}} iconSize={10}/>
                        </PieChart>
                    </ResponsiveContainer>
                </ChartCard>

                <ChartCard title="Redemptions Over Time (Points Redeemed)">
                     <ResponsiveContainer width="100%" height={300}>
                        <LineChart data={redemptionsOverTimeData} margin={{ top: 5, right: 20, left: 10, bottom: 5 }}>
                            <CartesianGrid strokeDasharray="3 3" />
                            <XAxis dataKey="name" angle={-30} textAnchor="end" height={70} interval={0} tick={{fontSize: 10}} />
                            <YAxis
                                label={{ value: 'Points', angle: -90, position: 'insideLeft', offset:10, fontSize: 12 }}
                                tickFormatter={(value) => `${value.toLocaleString()}`}
                                tick={{fontSize: 10}}
                            />
                            <Tooltip content={<CustomTooltip />} />
                            <Legend wrapperStyle={{fontSize: "12px"}} />
                            <Line type="monotone" dataKey="points" name="Points Redeemed" stroke="#FF8042" activeDot={{ r: 8 }} />
                        </LineChart>
                    </ResponsiveContainer>
                </ChartCard>
            </div>


            {/* Best/Worst & Recent Redemptions */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <HighlightCard title="ðŸŒŸ Best Redemption (by CPP)" redemption={overallStats.bestRedemption} getSourceLabel={getSourceLabel} />
                <HighlightCard title="ðŸ“‰ Worst Redemption (by CPP)" redemption={overallStats.worstRedemption} getSourceLabel={getSourceLabel} />
            </div>
           
            <div className="bg-white p-4 sm:p-6 rounded-lg shadow">
                <h3 className="text-xl font-semibold text-gray-700 mb-4">Recent Redemptions</h3>
                {recentRedemptions.length > 0 ? (
                    <div className="overflow-x-auto">
                        <table className="min-w-full divide-y divide-gray-200">
                            <thead className="bg-gray-50">
                                <tr>
                                    <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                                    <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Source</th>
                                    <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">CPP (Â¢)</th>
                                </tr>
                            </thead>
                            <tbody className="bg-white divide-y divide-gray-200">
                                {recentRedemptions.map(r => (
                                    <tr key={r.id}>
                                        <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-700">{new Date(r.date).toLocaleDateString()}</td>
                                        <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-700">{getSourceLabel(r.source)}</td>
                                        <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-700">{r.cpp}</td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                ) : <p className="text-sm text-gray-500">No recent redemptions.</p>}
            </div>
        </div>
    );
};

const MetricCard = ({ title, value, icon }) => (
    <div className="bg-white p-4 rounded-lg shadow flex items-center space-x-3">
        <div className="p-2 bg-gray-100 rounded-full">{icon}</div>
        <div>
            <p className="text-sm text-gray-500">{title}</p>
            <p className="text-xl font-semibold text-gray-800">{value}</p>
        </div>
    </div>
);

const ChartCard = ({ title, children }) => (
    <div className="bg-white p-4 sm:p-6 rounded-lg shadow">
        <h3 className="text-lg font-semibold text-gray-700 mb-4">{title}</h3>
        {children}
    </div>
);

const HighlightCard = ({ title, redemption, getSourceLabel }) => (
    <div className="bg-white p-4 sm:p-6 rounded-lg shadow">
        <h3 className="text-lg font-semibold text-gray-700 mb-3">{title}</h3>
        {redemption ? (
            <div className="space-y-1 text-sm">
                <p><span className="font-medium">Date:</span> {new Date(redemption.date).toLocaleDateString()}</p>
                <p><span className="font-medium">Source:</span> {getSourceLabel(redemption.source)}</p>
                <p><span className="font-medium">Points:</span> {redemption.totalPoints.toLocaleString()}</p>
                <p><span className="font-medium">Value:</span> ${parseFloat(redemption.cashValue - (redemption.taxesFees || 0)).toLocaleString()}</p>
                <p className="text-indigo-600 font-semibold"><span className="font-medium">CPP:</span> {redemption.cpp} Â¢</p>
            </div>
        ) : <p className="text-sm text-gray-500">N/A</p>}
    </div>
);


// RedemptionsPage Component
const RedemptionsPage = () => {
    const { redemptions, loading, addRedemption, updateRedemption, deleteRedemption, getSourceLabel } = useContext(RedemptionContext);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingRedemption, setEditingRedemption] = useState(null);
    const [searchTerm, setSearchTerm] = useState('');
    const [sortConfig, setSortConfig] = useState({ key: 'date', direction: 'descending' });

    const handleAddNew = () => {
        setEditingRedemption(null);
        setIsModalOpen(true);
    };

    const handleEdit = (redemption) => {
        setEditingRedemption(redemption);
        setIsModalOpen(true);
    };

    const handleDelete = async (id) => {
        // Consider replacing window.confirm with a custom modal for better UX and to avoid issues in iframe environments
        // For now, using window.confirm as a placeholder for confirmation logic.
        if (window.confirm('Are you sure you want to delete this redemption? This action cannot be undone.')) {
            await deleteRedemption(id);
        }
    };
   
    const sortedFilteredRedemptions = useMemo(() => {
        let sortableItems = [...redemptions];
        if (searchTerm) {
            sortableItems = sortableItems.filter(item =>
                getSourceLabel(item.source).toLowerCase().includes(searchTerm.toLowerCase()) ||
                (item.notes && item.notes.toLowerCase().includes(searchTerm.toLowerCase())) ||
                new Date(item.date).toLocaleDateString().includes(searchTerm)
            );
        }

        if (sortConfig.key !== null) {
            sortableItems.sort((a, b) => {
                let valA = a[sortConfig.key];
                let valB = b[sortConfig.key];

                if (sortConfig.key === 'source') {
                    valA = getSourceLabel(valA);
                    valB = getSourceLabel(valB);
                } else if (sortConfig.key === 'date') {
                    valA = new Date(valA);
                    valB = new Date(valB);
                } else if (typeof valA === 'string' && typeof valB === 'string') {
                    valA = valA.toLowerCase();
                    valB = valB.toLowerCase();
                } else if (typeof valA === 'number' && typeof valB === 'number') {
                    // standard number comparison
                }


                if (valA < valB) {
                    return sortConfig.direction === 'ascending' ? -1 : 1;
                }
                if (valA > valB) {
                    return sortConfig.direction === 'ascending' ? 1 : -1;
                }
                return 0;
            });
        }
        return sortableItems;
    }, [redemptions, searchTerm, sortConfig, getSourceLabel]);

    const requestSort = (key) => {
        let direction = 'ascending';
        if (sortConfig.key === key && sortConfig.direction === 'ascending') {
            direction = 'descending';
        } else if (sortConfig.key === key && sortConfig.direction === 'descending') {
            // Optional: third click removes sort or defaults to ascending
            direction = 'ascending';
        }
        setSortConfig({ key, direction });
    };

    const getSortIndicator = (key) => {
        if (sortConfig.key === key) {
            return sortConfig.direction === 'ascending' ? <ChevronUp size={16} className="inline ml-1" /> : <ChevronDown size={16} className="inline ml-1" />;
        }
        return null;
    };


    if (loading) return <div className="text-center p-10">Loading redemptions...</div>;

    return (
        <div className="p-4 md:p-6">
            <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
                <h2 className="text-3xl font-semibold text-gray-800">My Redemptions</h2>
                <button
                    onClick={handleAddNew}
                    className="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg shadow flex items-center transition duration-150"
                >
                    <PlusCircle size={20} className="mr-2" /> Add New Redemption
                </button>
            </div>

            <div className="mb-4">
                <div className="relative">
                    <input
                        type="text"
                        placeholder="Search by source, notes, or date..."
                        className="w-full p-2 pl-10 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                    />
                    <Search size={20} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                </div>
            </div>

            {redemptions.length === 0 && !searchTerm ? (
                 <div className="text-center p-10 bg-white rounded-lg shadow">
                    <List size={48} className="mx-auto text-gray-400 mb-4" />
                    <h3 className="text-xl font-medium text-gray-700 mb-2">No Redemptions Yet</h3>
                    <p className="text-gray-500 mb-4">Start tracking your credit card point redemptions by adding your first one.</p>
                    <button
                        onClick={handleAddNew}
                        className="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg shadow flex items-center transition duration-150 mx-auto"
                    >
                        <PlusCircle size={20} className="mr-2" /> Add First Redemption
                    </button>
                </div>
            ) : sortedFilteredRedemptions.length === 0 && searchTerm ? (
                <div className="text-center p-10 bg-white rounded-lg shadow">
                    <Info size={48} className="mx-auto text-gray-400 mb-4" />
                    <h3 className="text-xl font-medium text-gray-700 mb-2">No Results Found</h3>
                    <p className="text-gray-500">Your search for "{searchTerm}" did not match any redemptions.</p>
                </div>
            ) : (
                <div className="bg-white rounded-lg shadow overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                            <tr>
                                {['Date', 'Source', 'Total Points', 'Taxes/Fees', 'Cash Value', 'CPP (Â¢)', 'Notes', 'Actions'].map((header, idx) => {
                                    const keyMap = { 'Date': 'date', 'Source': 'source', 'Total Points': 'totalPoints', 'Taxes/Fees': 'taxesFees', 'Cash Value': 'cashValue', 'CPP (Â¢)': 'cpp', 'Notes': 'notes' };
                                    const sortKey = keyMap[header];
                                    return (
                                        <th
                                            key={idx}
                                            scope="col"
                                            className={`px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider ${sortKey ? 'cursor-pointer' : ''}`}
                                            onClick={() => sortKey && requestSort(sortKey)}
                                        >
                                            {header} {sortKey && getSortIndicator(sortKey)}
                                        </th>
                                    );
                                })}
                            </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                            {sortedFilteredRedemptions.map((redemption) => (
                                <tr key={redemption.id} className="hover:bg-gray-50 transition-colors">
                                    <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700">{new Date(redemption.date).toLocaleDateString()}</td>
                                    <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700">{getSourceLabel(redemption.source)}</td>
                                    <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700">{parseFloat(redemption.totalPoints).toLocaleString()}</td>
                                    <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700">${parseFloat(redemption.taxesFees || 0).toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</td>
                                    <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700">${parseFloat(redemption.cashValue).toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</td>
                                    <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-indigo-600">{redemption.cpp}</td>
                                    <td className="px-4 py-3 text-sm text-gray-700 max-w-xs truncate" title={redemption.notes}>{redemption.notes || '-'}</td>
                                    <td className="px-4 py-3 whitespace-nowrap text-sm font-medium space-x-2">
                                        <button onClick={() => handleEdit(redemption)} className="text-blue-600 hover:text-blue-800 transition duration-150" title="Edit">
                                            <Edit2 size={18} />
                                        </button>
                                        <button onClick={() => handleDelete(redemption.id)} className="text-red-600 hover:text-red-800 transition duration-150" title="Delete">
                                            <Trash2 size={18} />
                                        </button>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            )}

            <RedemptionFormModal
                isOpen={isModalOpen}
                onClose={() => setIsModalOpen(false)}
                onSubmit={editingRedemption ? updateRedemption : addRedemption}
                initialData={editingRedemption}
            />
        </div>
    );
};

const RedemptionFormModal = ({ isOpen, onClose, onSubmit, initialData }) => {
    const { calculateCPP } = useContext(RedemptionContext);
    const [formData, setFormData] = useState({
        date: new Date(),
        source: SOURCE_OPTIONS[0].value,
        totalPoints: '',
        taxesFees: '0',
        cashValue: '',
        notes: ''
    });
    const [formErrors, setFormErrors] = useState({});

    // Helper function to format Date object to YYYY-MM-DD string
    const formatDateForInput = (dateObj) => {
        if (!dateObj || !(dateObj instanceof Date) || isNaN(dateObj)) return '';
        const year = dateObj.getFullYear();
        const month = (dateObj.getMonth() + 1).toString().padStart(2, '0');
        const day = dateObj.getDate().toString().padStart(2, '0');
        return `${year}-${month}-${day}`;
    };

    useEffect(() => {
        if (initialData) {
            setFormData({
                ...initialData,
                date: initialData.date instanceof Date ? initialData.date : new Date(initialData.date),
                taxesFees: initialData.taxesFees !== undefined ? String(initialData.taxesFees) : '0',
                cashValue: String(initialData.cashValue),
                totalPoints: String(initialData.totalPoints),
            });
        } else {
            setFormData({
                date: new Date(), // Default to today for new entries
                source: SOURCE_OPTIONS[0].value,
                totalPoints: '',
                taxesFees: '0',
                cashValue: '',
                notes: ''
            });
        }
        setFormErrors({}); // Clear errors when modal opens or data changes
    }, [initialData, isOpen]);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
        if (formErrors[name]) {
            setFormErrors(prev => ({...prev, [name]: null}));
        }
    };

    const handleDateChange = (e) => {
        const dateString = e.target.value;
        // When using <input type="date">, the browser might return an empty string if the date is cleared.
        // new Date('') results in an invalid date. Handle this case.
        // Also, dateString is YYYY-MM-DD. new Date(dateString) might have timezone issues.
        // It's often better to parse it as UTC or ensure consistency.
        // For simplicity here, we'll create a local date.
        // If dateString is empty, we might want to set date to null or keep previous valid date.
        // For now, let's assume a valid date string or handle it in validation.
        if (dateString) {
            const [year, month, day] = dateString.split('-').map(Number);
            // Create date in local timezone. Months are 0-indexed for Date constructor.
            setFormData(prev => ({ ...prev, date: new Date(year, month - 1, day) }));
        } else {
             setFormData(prev => ({ ...prev, date: null })); // Or some other default/error state
        }

        if (formErrors.date) {
            setFormErrors(prev => ({...prev, date: null}));
        }
    };

    const validateForm = () => {
        const errors = {};
        if (!formData.date || !(formData.date instanceof Date) || isNaN(formData.date)) errors.date = "Date is required.";
        if (!formData.source) errors.source = "Source is required.";
        if (!formData.totalPoints || parseFloat(formData.totalPoints) <= 0) errors.totalPoints = "Total points must be a positive number.";
        if (formData.taxesFees && parseFloat(formData.taxesFees) < 0) errors.taxesFees = "Taxes/Fees cannot be negative.";
        if (!formData.cashValue || parseFloat(formData.cashValue) <= 0) errors.cashValue = "Cash value must be a positive number.";
       
        setFormErrors(errors);
        return Object.keys(errors).length === 0;
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!validateForm()) return;

        const submissionData = {
            ...formData,
            totalPoints: parseFloat(formData.totalPoints),
            taxesFees: parseFloat(formData.taxesFees || 0),
            cashValue: parseFloat(formData.cashValue),
            // Ensure date is a valid Date object before submission
            date: formData.date instanceof Date && !isNaN(formData.date) ? formData.date : new Date()
        };
        if (initialData && initialData.id) {
            await onSubmit(initialData.id, submissionData);
        } else {
            await onSubmit(submissionData);
        }
        onClose();
    };
   
    const calculatedCppPreview = useMemo(() => {
        if (formData.totalPoints && formData.cashValue && parseFloat(formData.totalPoints) > 0) {
            return calculateCPP(formData.cashValue, formData.taxesFees, formData.totalPoints);
        }
        return null;
    }, [formData.cashValue, formData.taxesFees, formData.totalPoints, calculateCPP]);


    return (
        <Modal isOpen={isOpen} onClose={onClose} title={initialData ? 'Edit Redemption' : 'Add New Redemption'}>
            <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                    <label htmlFor="date" className="block text-sm font-medium text-gray-700">Date</label>
                    <input
                        type="date"
                        id="date"
                        name="date"
                        value={formatDateForInput(formData.date)}
                        onChange={handleDateChange}
                        className={`mt-1 block w-full px-3 py-2 border ${formErrors.date ? 'border-red-500' : 'border-gray-300'} rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm`}
                    />
                    {formErrors.date && <p className="mt-1 text-xs text-red-500">{formErrors.date}</p>}
                </div>
                <div>
                    <label htmlFor="source" className="block text-sm font-medium text-gray-700">Source</label>
                    <select
                        id="source"
                        name="source"
                        value={formData.source}
                        onChange={handleChange}
                        className={`mt-1 block w-full px-3 py-2 border ${formErrors.source ? 'border-red-500' : 'border-gray-300'} rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm`}
                    >
                        {SOURCE_OPTIONS.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
                    </select>
                    {formErrors.source && <p className="mt-1 text-xs text-red-500">{formErrors.source}</p>}
                </div>
                <div>
                    <label htmlFor="totalPoints" className="block text-sm font-medium text-gray-700">Total Points</label>
                    <input
                        type="number"
                        id="totalPoints"
                        name="totalPoints"
                        value={formData.totalPoints}
                        onChange={handleChange}
                        className={`mt-1 block w-full px-3 py-2 border ${formErrors.totalPoints ? 'border-red-500' : 'border-gray-300'} rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm`}
                        placeholder="e.g., 50000"
                        step="any" // Allow decimals if needed, though points are usually whole numbers
                    />
                    {formErrors.totalPoints && <p className="mt-1 text-xs text-red-500">{formErrors.totalPoints}</p>}
                </div>
                <div>
                    <label htmlFor="taxesFees" className="block text-sm font-medium text-gray-700">Taxes/Fees (USD)</label>
                    <input
                        type="number"
                        id="taxesFees"
                        name="taxesFees"
                        value={formData.taxesFees}
                        onChange={handleChange}
                        className={`mt-1 block w-full px-3 py-2 border ${formErrors.taxesFees ? 'border-red-500' : 'border-gray-300'} rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm`}
                        placeholder="e.g., 5.60"
                        step="0.01"
                    />
                     {formErrors.taxesFees && <p className="mt-1 text-xs text-red-500">{formErrors.taxesFees}</p>}
                </div>
                <div>
                    <label htmlFor="cashValue" className="block text-sm font-medium text-gray-700">Cash Value (USD)</label>
                    <input
                        type="number"
                        id="cashValue"
                        name="cashValue"
                        value={formData.cashValue}
                        onChange={handleChange}
                        className={`mt-1 block w-full px-3 py-2 border ${formErrors.cashValue ? 'border-red-500' : 'border-gray-300'} rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm`}
                        placeholder="e.g., 1000"
                        step="0.01"
                    />
                    {formErrors.cashValue && <p className="mt-1 text-xs text-red-500">{formErrors.cashValue}</p>}
                </div>
                {calculatedCppPreview !== null && (
                    <div className="mt-2 text-sm text-gray-600">
                        Preview CPP: <span className="font-semibold text-indigo-600">{calculatedCppPreview} Â¢</span>
                    </div>
                )}
                <div>
                    <label htmlFor="notes" className="block text-sm font-medium text-gray-700">Notes</label>
                    <textarea
                        id="notes"
                        name="notes"
                        value={formData.notes}
                        onChange={handleChange}
                        rows="3"
                        className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                        placeholder="e.g., Business class flight to London"
                    ></textarea>
                </div>
                <div className="flex justify-end space-x-3 pt-2">
                    <button
                        type="button"
                        onClick={onClose}
                        className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition"
                    >
                        Cancel
                    </button>
                    <button
                        type="submit"
                        className="px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition"
                    >
                        {initialData ? 'Update Redemption' : 'Add Redemption'}
                    </button>
                </div>
            </form>
        </Modal>
    );
};


// CalculatorPage Component
const CalculatorPage = () => {
    const { calculateCPP } = useContext(RedemptionContext);
    const [inputs, setInputs] = useState({
        source: SOURCE_OPTIONS[0].value,
        totalPoints: '',
        taxesFees: '0',
        cashValue: ''
    });
    const [result, setResult] = useState(null);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setInputs(prev => ({ ...prev, [name]: value }));
        setResult(null); // Clear result on input change
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        if (!inputs.totalPoints || !inputs.cashValue || parseFloat(inputs.totalPoints) <= 0 || parseFloat(inputs.cashValue) <= 0) {
            setResult({ error: "Please enter valid Total Points and Cash Value (must be > 0)." });
            return;
        }
        if (inputs.taxesFees && parseFloat(inputs.taxesFees) < 0) {
            setResult({ error: "Taxes/Fees cannot be negative." });
            return;
        }

        const cpp = calculateCPP(inputs.cashValue, inputs.taxesFees, inputs.totalPoints);
        const acceptedValue = COMMONLY_ACCEPTED_POINT_VALUES[inputs.source] || 1.0; // Default if source not in map
       
        let recommendation = '';
        let recommendationType = ''; // 'good', 'ok', 'poor'

        if (cpp >= acceptedValue * 1.1) { // More than 10% above accepted
            recommendation = `This looks like an EXCELLENT use of your points! You're getting ${cpp} CPP, which is well above the typical ${acceptedValue} CPP.`;
            recommendationType = 'good';
        } else if (cpp >= acceptedValue * 0.9) { // Within +/- 10% of accepted
            recommendation = `This is a GOOD use of your points. You're getting ${cpp} CPP, around the typical ${acceptedValue} CPP.`;
            recommendationType = 'ok';
        } else if (cpp >= acceptedValue * 0.75) { // Between 75% and 90% of accepted
             recommendation = `This redemption offers ${cpp} CPP. It's a bit below the typical ${acceptedValue} CPP, but might be worth it depending on your needs.`;
            recommendationType = 'ok_poor';
        }
         else {
            recommendation = `Consider saving your points. This redemption only offers ${cpp} CPP, which is below the typical ${acceptedValue} CPP.`;
            recommendationType = 'poor';
        }

        setResult({ cpp, recommendation, recommendationType, acceptedValue });
    };
   
    const getRecommendationIcon = (type) => {
        switch (type) {
            case 'good': return <CheckCircle size={24} className="text-green-500 mr-2" />;
            case 'ok': return <Info size={24} className="text-blue-500 mr-2" />;
            case 'ok_poor': return <AlertTriangle size={24} className="text-yellow-500 mr-2" />;
            case 'poor': return <XCircle size={24} className="text-red-500 mr-2" />;
            default: return null;
        }
    };
   
    const getRecommendationBgColor = (type) => {
        switch (type) {
            case 'good': return 'bg-green-50 border-green-300';
            case 'ok': return 'bg-blue-50 border-blue-300';
            case 'ok_poor': return 'bg-yellow-50 border-yellow-300';
            case 'poor': return 'bg-red-50 border-red-300';
            default: return 'bg-gray-50 border-gray-300';
        }
    };


    return (
        <div className="p-4 md:p-6 max-w-2xl mx-auto">
            <h2 className="text-3xl font-semibold text-gray-800 mb-6 text-center">Cents Per Point Calculator</h2>
            <p className="text-center text-gray-600 mb-8">
                Determine if a potential redemption is a good use of your points.
                Enter the details below to calculate the Cents Per Point (CPP) value.
            </p>
            <form onSubmit={handleSubmit} className="bg-white p-6 md:p-8 rounded-lg shadow-lg space-y-6">
                <div>
                    <label htmlFor="calc-source" className="block text-sm font-medium text-gray-700 mb-1">Source Program</label>
                    <select
                        id="calc-source"
                        name="source"
                        value={inputs.source}
                        onChange={handleChange}
                        className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    >
                        {SOURCE_OPTIONS.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
                    </select>
                    <p className="mt-1 text-xs text-gray-500">Commonly accepted value for {SOURCE_OPTIONS.find(o => o.value === inputs.source)?.label || 'selected program'}: ~{COMMONLY_ACCEPTED_POINT_VALUES[inputs.source] || 'N/A'} CPP</p>
                </div>
                <div>
                    <label htmlFor="calc-totalPoints" className="block text-sm font-medium text-gray-700 mb-1">Total Points Required</label>
                    <input
                        type="number"
                        id="calc-totalPoints"
                        name="totalPoints"
                        value={inputs.totalPoints}
                        onChange={handleChange}
                        className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                        placeholder="e.g., 50000"
                        required
                        step="any"
                    />
                </div>
                <div>
                    <label htmlFor="calc-taxesFees" className="block text-sm font-medium text-gray-700 mb-1">Taxes/Fees (USD)</label>
                    <input
                        type="number"
                        id="calc-taxesFees"
                        name="taxesFees"
                        value={inputs.taxesFees}
                        onChange={handleChange}
                        className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                        placeholder="e.g., 5.60 (optional)"
                        step="0.01"
                    />
                </div>
                <div>
                    <label htmlFor="calc-cashValue" className="block text-sm font-medium text-gray-700 mb-1">Cash Value of Redemption (USD)</label>
                    <input
                        type="number"
                        id="calc-cashValue"
                        name="cashValue"
                        value={inputs.cashValue}
                        onChange={handleChange}
                        className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                        placeholder="e.g., 1000"
                        required
                        step="0.01"
                    />
                </div>
                <button
                    type="submit"
                    className="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2.5 px-4 rounded-lg shadow flex items-center justify-center transition duration-150 text-base"
                >
                    <CalculatorIcon size={20} className="mr-2" /> Calculate CPP
                </button>
            </form>

            {result && (
                <div className={`mt-8 p-6 rounded-lg border ${getRecommendationBgColor(result.recommendationType)}`}>
                    {result.error ? (
                        <div className="flex items-center">
                            <AlertTriangle size={24} className="text-red-500 mr-3" />
                            <p className="text-red-700 font-medium">{result.error}</p>
                        </div>
                    ) : (
                        <>
                            <div className="flex items-center mb-3">
                                {getRecommendationIcon(result.recommendationType)}
                                <h3 className="text-2xl font-semibold text-gray-800">
                                    Your Potential CPP: <span className="text-blue-600">{result.cpp} Â¢</span>
                                </h3>
                            </div>
                            <p className="text-gray-700 text-sm mb-2">
                                Commonly accepted value for this program: ~{result.acceptedValue} CPP
                            </p>
                            <p className="text-gray-700">{result.recommendation}</p>
                        </>
                    )}
                </div>
            )}
           
            <div className="mt-10 p-4 bg-gray-50 rounded-lg border border-gray-200">
                <h4 className="font-semibold text-gray-700 mb-2 flex items-center"><Info size={18} className="mr-2 text-blue-500" />What is Cents Per Point (CPP)?</h4>
                <p className="text-sm text-gray-600">
                    CPP is a metric used to determine the value you get from your credit card points or miles when redeeming them.
                    It's calculated as: <br />
                    <code className="text-xs bg-gray-200 p-1 rounded">(Cash Value of Redemption - Taxes/Fees) / Total Points Used * 100</code>. <br />
                    A higher CPP generally means you're getting more value for your points.
                </p>
            </div>
        </div>
    );
};


// --- Main App Component ---
const App = () => {
    const [currentPage, setCurrentPage] = useState('home');
    const { userId, isAuthReady } = useContext(RedemptionContext);


    const renderPage = () => {
        switch (currentPage) {
            case 'home': return <DashboardPage />;
            case 'redemptions': return <RedemptionsPage />;
            case 'calculator': return <CalculatorPage />;
            default: return <DashboardPage />;
        }
    };

    const NavLink = ({ page, children, icon: Icon }) => (
        <button
            onClick={() => setCurrentPage(page)}
            className={`flex items-center px-3 py-2 rounded-md text-sm font-medium transition-colors duration-150
                        ${currentPage === page
                            ? 'bg-blue-600 text-white shadow-md'
                            : 'text-gray-700 hover:bg-blue-100 hover:text-blue-700'
                        }`}
        >
            <Icon size={18} className="mr-2" />
            {children}
        </button>
    );
   
    if (!isAuthReady) {
        return (
            <div className="min-h-screen flex items-center justify-center bg-gray-100">
                <div className="text-center">
                    <svg className="animate-spin h-10 w-10 text-blue-500 mx-auto mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <p className="text-gray-600">Initializing Cents Per Point...</p>
                </div>
            </div>
        );
    }


    return (
        <div className="min-h-screen bg-gray-100">
            <header className="bg-white shadow-md sticky top-0 z-40">
                <div className="container mx-auto px-4 py-3">
                    <div className="flex flex-col sm:flex-row justify-between items-center">
                        <h1 className="text-2xl font-bold text-blue-600 mb-2 sm:mb-0">Cents Per Point</h1>
                        <nav className="flex space-x-2 sm:space-x-3">
                            <NavLink page="home" icon={Home}>Dashboard</NavLink>
                            <NavLink page="redemptions" icon={List}>Redemptions</NavLink>
                            <NavLink page="calculator" icon={CalculatorIcon}>Calculator</NavLink>
                        </nav>
                    </div>
                    {userId && (
                        <p className="text-xs text-gray-500 mt-2 text-center sm:text-right">
                            User ID: <span className="font-mono bg-gray-200 px-1 rounded">{userId}</span>
                        </p>
                    )}
                </div>
            </header>
            <main className="container mx-auto px-2 py-4 md:px-4 md:py-6">
                {renderPage()}
            </main>
            <footer className="text-center py-6 text-sm text-gray-500 border-t border-gray-200 mt-8">
                Â© {new Date().getFullYear()} Cents Per Point App. Track wisely!
            </footer>
        </div>
    );
};

// Wrap App with Provider for context to work
const AppWrapper = () => (
    <RedemptionProvider>
        <App />
    </RedemptionProvider>
);

export default AppWrapper;